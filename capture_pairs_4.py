import os
import subprocess
import time
import hashlib

# --- –ù–∞—Å—Ç—Ä–æ–π–∫–∏ ---
original_dir = "original_photos"  # –ü–∞–ø–∫–∞ —Å –∏—Å—Ö–æ–¥–Ω—ã–º–∏ —Ñ–æ—Ç–æ
output_dir = "pairs"              # –ü–∞–ø–∫–∞ –¥–ª—è –ø–∞—Ä (–æ—Ä–∏–≥–∏–Ω–∞–ª + —Ñ–æ—Ç–æ —Å —ç–∫—Ä–∞–Ω–∞)
opencamera_dir = "/sdcard/DCIM/OpenCamera"  # –ü—É—Ç—å –∫ —Ñ–æ—Ç–æ –Ω–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–µ

os.makedirs(output_dir, exist_ok=True)

def get_last_photo_from_phone():
    """–ü–æ–ª—É—á–∞–µ—Ç –∏–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ JPG-—Ñ–∞–π–ª–∞ —Å —Ç–µ–ª–µ—Ñ–æ–Ω–∞"""
    result = subprocess.run(
        ["adb", "shell", "ls", "-t", opencamera_dir],
        capture_output=True, text=True
    )
    files = [f.strip() for f in result.stdout.splitlines() if f.strip().endswith(".jpg")]
    return files[0] if files else None

def is_opencamera_running():
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –∑–∞–ø—É—â–µ–Ω–∞ –ª–∏ OpenCamera"""
    result = subprocess.run(
        ["adb", "shell", "dumpsys", "window", "windows"],
        capture_output=True, text=True
    )
    return "net.sourceforge.opencamera/net.sourceforge.opencamera.MainActivity" in result.stdout

def get_file_hash(path):
    """–í—ã—á–∏—Å–ª—è–µ—Ç SHA256-—Ö–µ—à —Ñ–∞–π–ª–∞ –ø–æ –ø—É—Ç–∏"""
    h = hashlib.sha256()
    with open(path, "rb") as f:
        while chunk := f.read(8192):
            h.update(chunk)
    return h.hexdigest()

# --- –û—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª ---
for img_name in sorted(os.listdir(original_dir)):
    if not img_name.lower().endswith(('.jpg', '.jpeg', '.png')):
        continue

    img_path = os.path.join(original_dir, img_name)

    # –ó–∞–∫—Ä—ã–≤–∞–µ–º Preview, –µ—Å–ª–∏ –æ–Ω –æ—Ç–∫—Ä—ã—Ç
    subprocess.run(["pkill", "Preview"])
    time.sleep(1)

    # –û—Ç–∫—Ä—ã–≤–∞–µ–º –Ω–æ–≤–æ–µ —Ñ–æ—Ç–æ
    subprocess.run(["open", "-a", "Preview", img_path])
    time.sleep(2)

    # –ó–∞–ø—É—Å–∫–∞–µ–º OpenCamera, –µ—Å–ª–∏ –Ω–µ –∑–∞–ø—É—â–µ–Ω–∞
    if not is_opencamera_running():
        subprocess.run(["adb", "shell", "am", "start", "-n", "net.sourceforge.opencamera/.MainActivity"])
        time.sleep(3)

    # –ü–æ–ª—É—á–∞–µ–º –∏–º—è –∏ —Ö–µ—à —Ç–µ–∫—É—â–µ–≥–æ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —Ñ–æ—Ç–æ
    prev_photo = get_last_photo_from_phone()
    prev_hash = None
    if prev_photo:
        temp_path = "__temp_prev.jpg"
        subprocess.run(["adb", "pull", f"{opencamera_dir}/{prev_photo}", temp_path], capture_output=True)
        if os.path.exists(temp_path):
            prev_hash = get_file_hash(temp_path)
            os.remove(temp_path)

    print("üì∑ –°–Ω–∏–º–∏ —ç–∫—Ä–∞–Ω –≤—Ä—É—á–Ω—É—é. –ñ–¥—ë–º –ø–æ—è–≤–ª–µ–Ω–∏—è –Ω–æ–≤–æ–≥–æ —Å–Ω–∏–º–∫–∞...")

    # –ñ–¥—ë–º –ø–æ—è–≤–ª–µ–Ω–∏—è –Ω–æ–≤–æ–≥–æ —Å–Ω–∏–º–∫–∞ —Å –¥—Ä—É–≥–∏–º —Ö–µ—à–µ–º
    timeout = 30  # —Å–µ–∫—É–Ω–¥
    start_time = time.time()
    new_photo = None

    while time.time() - start_time < timeout:
        current_photo = get_last_photo_from_phone()
        if current_photo and current_photo != prev_photo:
            temp_path = "__temp_check.jpg"
            subprocess.run(["adb", "pull", f"{opencamera_dir}/{current_photo}", temp_path], capture_output=True)
            if os.path.exists(temp_path):
                current_hash = get_file_hash(temp_path)
                if current_hash != prev_hash:
                    new_photo = current_photo
                    break
                os.remove(temp_path)
        time.sleep(1)

    if new_photo:
        remote_path = f"{opencamera_dir}/{new_photo}"
        local_path = os.path.join(output_dir, f"screen_{img_name}")
        subprocess.run(["adb", "pull", remote_path, local_path])
        print(f"‚úÖ –°–∫–æ–ø–∏—Ä–æ–≤–∞–Ω–æ: {local_path}")
        subprocess.run(["afplay", "/System/Library/Sounds/Glass.aiff"])
    else:
        print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –Ω–æ–≤—ã–π —Å–Ω–∏–º–æ–∫. –ü–æ–ø—Ä–æ–±—É–π –µ—â—ë —Ä–∞–∑.")
